/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.puntodeventa.mvc.Views;

import com.puntodeventa.global.Entity.Product;
import com.puntodeventa.global.Entity.Usuario;
import com.puntodeventa.global.Util.ValidacionForms;
import com.puntodeventa.mvc.Controller.AccesoFormsLogic;
import com.puntodeventa.mvc.Controller.CategoryLogic;
import com.puntodeventa.mvc.Controller.NegocioLogic;
import com.puntodeventa.mvc.Controller.UsuarioLogic;
import com.puntodeventa.mvc.Model.Category;
import com.puntodeventa.services.DAO.ProductDAO;
import java.awt.event.KeyEvent;
import java.math.BigInteger;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;

/**
 *
 * @author Nato
 */
public class frmProduct_1 extends javax.swing.JInternalFrame {

    static ProductDAO pDAO = new ProductDAO();
    static NegocioLogic negocioLogic = new NegocioLogic();
    static CategoryLogic categoryLogic = new CategoryLogic();
    AccesoFormsLogic accesoFormsLogic = new AccesoFormsLogic();
    UsuarioLogic userLogic = new UsuarioLogic();
    static ValidacionForms valForm = new ValidacionForms();
    DefaultTableModel modelo = new DefaultTableModel();
    static List<Category> myCategory;
    private static int vActivo = 0;
    private static String mensaje;
    private String NameClass = this.getClass().getSimpleName();
    static String pathImage = System.getProperty("user.dir") + "/src/images/";

    /**
     * Creates new form Alumno
     */
    public frmProduct_1() {
        this.getInitAcceso(getUser().getId_usuario());
    }
    
    private void getInitAcceso(int id_usuario) {
        String msj = accesoFormsLogic.getAcceso(id_usuario, NameClass);
        if (msj != null) {
            valForm.msjInfo(msj);
            dispose();
        } else {
           initComponents();
            valForm.centerFrame(this);
            myCategory = getCategory();
            if (mtdProductTable()) {
            this.getCmbCategory(myCategory);
            }
        }
    }
    
    private Usuario getUser(){
        Usuario usuario;
        usuario = userLogic.getUserSerializable();
        return usuario;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jtbpProduct = new javax.swing.JTabbedPane();
        jpnAddProduct = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtxtId_Product = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtxtProduct = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtxtDescripcion = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtxtPrecioCompra = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jtxtPrecioVenta = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtxtCantidad = new javax.swing.JTextField();
        jchkActivo = new javax.swing.JCheckBox();
        jcmbCategoria = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jbtnOperacion = new javax.swing.JButton();
        jbtnCancelar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jpnListProduct = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtblProduct = new javax.swing.JTable();
        jlblRegistros = new javax.swing.JLabel();
        jbtnRecuperar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jtxtCodigoBusca = new javax.swing.JTextField();
        jbtnBusca = new javax.swing.JButton();

        jMenu1.setText("jMenu1");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);

        jtbpProduct.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Codigo:");

        jtxtId_Product.setEditable(false);
        jtxtId_Product.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtxtId_Product.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtxtId_ProductKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Producto:");

        jtxtProduct.setEditable(false);
        jtxtProduct.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtxtProduct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtxtProductKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Descripcion:");

        jtxtDescripcion.setEditable(false);
        jtxtDescripcion.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtxtDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtDescripcionActionPerformed(evt);
            }
        });
        jtxtDescripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtxtDescripcionKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Precio Compra:");

        jtxtPrecioCompra.setEditable(false);
        jtxtPrecioCompra.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtxtPrecioCompra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtxtPrecioCompraKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Precio Venta:");

        jtxtPrecioVenta.setEditable(false);
        jtxtPrecioVenta.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtxtPrecioVenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtxtPrecioVentaKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Cantidad:");

        jtxtCantidad.setEditable(false);
        jtxtCantidad.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtxtCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtxtCantidadKeyTyped(evt);
            }
        });

        jchkActivo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jchkActivo.setText("Activo");

        jcmbCategoria.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Categoria:");

        jbtnOperacion.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtnOperacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new.gif"))); // NOI18N
        jbtnOperacion.setText("Nuevo");
        jbtnOperacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnOperacionActionPerformed(evt);
            }
        });

        jbtnCancelar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cancelar.png"))); // NOI18N
        jbtnCancelar.setText("Cancelar");
        jbtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelarActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Agregue, Modifique Articulos de su Inventario");
        jLabel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jpnAddProductLayout = new javax.swing.GroupLayout(jpnAddProduct);
        jpnAddProduct.setLayout(jpnAddProductLayout);
        jpnAddProductLayout.setHorizontalGroup(
            jpnAddProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnAddProductLayout.createSequentialGroup()
                .addGroup(jpnAddProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpnAddProductLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jpnAddProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnAddProductLayout.createSequentialGroup()
                                .addGroup(jpnAddProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(11, 11, 11)
                                .addGroup(jpnAddProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtxtDescripcion)
                                    .addComponent(jtxtProduct, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jpnAddProductLayout.createSequentialGroup()
                                        .addComponent(jtxtId_Product, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jchkActivo)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jpnAddProductLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtxtPrecioCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jtxtPrecioVenta, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jtxtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpnAddProductLayout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jcmbCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jpnAddProductLayout.createSequentialGroup()
                        .addGap(236, 692, Short.MAX_VALUE)
                        .addComponent(jbtnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jpnAddProductLayout.setVerticalGroup(
            jpnAddProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnAddProductLayout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jpnAddProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtId_Product, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jchkActivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpnAddProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jpnAddProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jpnAddProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtxtPrecioCompra)
                    .addComponent(jtxtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jtxtPrecioVenta)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jpnAddProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcmbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(32, 32, 32)
                .addGroup(jpnAddProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnOperacion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(150, 150, 150))
        );

        jtbpProduct.addTab("Agregar producto", jpnAddProduct);

        jtblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Product/Des", "Cantidad", "P/Compra", "P/Venta", "Categoria", "Activo"
            }
        ));
        jtblProduct.getTableHeader().setReorderingAllowed(false);
        jtblProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblProductMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtblProductMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jtblProduct);

        jlblRegistros.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlblRegistros.setText("Hay 10000 productos registrados en la base de datos");

        jbtnRecuperar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbtnRecuperar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reportesporgrupo.gif"))); // NOI18N
        jbtnRecuperar.setText("Modificar");
        jbtnRecuperar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRecuperarActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Codigo de Barras:");

        jtxtCodigoBusca.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtxtCodigoBusca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtCodigoBuscaKeyPressed(evt);
            }
        });

        jbtnBusca.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbtnBusca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/buscar.png"))); // NOI18N
        jbtnBusca.setText("Buscar");
        jbtnBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBuscaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpnListProductLayout = new javax.swing.GroupLayout(jpnListProduct);
        jpnListProduct.setLayout(jpnListProductLayout);
        jpnListProductLayout.setHorizontalGroup(
            jpnListProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jpnListProductLayout.createSequentialGroup()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtxtCodigoBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtnBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlblRegistros, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jbtnRecuperar, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpnListProductLayout.setVerticalGroup(
            jpnListProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnListProductLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnListProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblRegistros)
                    .addComponent(jLabel10)
                    .addComponent(jtxtCodigoBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnRecuperar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4))
        );

        jtbpProduct.addTab("Lista de productos", jpnListProduct);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtbpProduct, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtbpProduct, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtxtDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtDescripcionActionPerformed
    }//GEN-LAST:event_jtxtDescripcionActionPerformed

    private void jbtnOperacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnOperacionActionPerformed
        try {
            if (this.jbtnOperacion.getText().equals("Nuevo")) {
                jbtnOperacion.setText("Guardar");
                jbtnOperacion.setIcon(new ImageIcon(pathImage + "buscar.png"));
                valForm.editableTextFields(jpnAddProduct, true);
                jtbpProduct.setEnabledAt(1, false);
                jtxtId_Product.requestFocus();
            } else {
                if (true == jchkActivo.isSelected()) {
                    vActivo = 1;
                } else {
                    vActivo = 0;
                }

                mensaje = "* Verifica lo siguiente:\n";
                boolean ban = true;
                if (this.jtxtProduct.getText().equals("")) {
                    mensaje = mensaje + "\t- Hace falta ingresar el nombre del articulo\n";
                    ban = false;
                }
                if (this.jtxtDescripcion.getText().equals("")) {
                    mensaje = mensaje + "\t- Hace falta ingresar una descripcion del articulo\n";
                    ban = false;
                }
                if (this.jtxtPrecioCompra.getText().equals("")) {
                    mensaje = mensaje + "\t- Hace falta ingresar precio de Compra del articulo\n";
                    ban = false;
                }
                if (this.jtxtPrecioVenta.getText().equals("")) {
                    mensaje = mensaje + "\t- Hace falta ingresar el precio de Venta del articulo\n";
                    ban = false;
                }
                if (this.jtxtCantidad.getText().equals("")) {
                    mensaje = mensaje + "\t- Hace falta ingresar la cantidad del articulo\n";
                    ban = false;
                }
                if (Integer.parseInt(this.jtxtCantidad.getText()) <= 0) {
                    mensaje = mensaje + "\t- La cantidad ingresada no es valida\n";
                    ban = false;
                }
                if (this.jcmbCategoria.getSelectedIndex() == 0) {
                    mensaje = mensaje + "\t- Seleccione la categoria\n";
                    ban = false;
                }
                if (ban == true) {
                    Product product = new Product(this.jtxtId_Product.getText(),
                            this.jtxtProduct.getText(),
                            this.jtxtDescripcion.getText(),
                            Double.parseDouble(this.jtxtPrecioCompra.getText()),
                            (Integer.parseInt(this.jtxtCantidad.getText())),
                            valForm.fechaActual(),
                            1,
                            BigInteger.valueOf(01010101),
                            Double.parseDouble(this.jtxtPrecioVenta.getText()),
                            vActivo,
                            valForm.fechaActual(),
                            "0",
                            "0",
                            "" + jcmbCategoria.getSelectedIndex());

                    if (this.jbtnOperacion.getText().equals("Guardar")) {
                        String p = pDAO.saveProduct(product);
                        valForm.cleanTextField(jpnAddProduct);
                        jbtnOperacion.setText("Nuevo");
                        jbtnOperacion.setIcon(new ImageIcon(pathImage + "new.gif"));
                        jtbpProduct.setEnabledAt(1, true);
                        valForm.editableTextFields(jpnAddProduct, false);
                        this.jcmbCategoria.setSelectedIndex(0);
                        if (mtdProductTable()) {
                            valForm.msjInfo("Registro guardado correctamente...");
                        }
                    }

                    if (this.jbtnOperacion.getText().equals("Actualizar")) {
                        pDAO.updateProduct(product);
                        valForm.cleanTextField(jpnAddProduct);
                        valForm.editableTextFields(jpnAddProduct, false);
                        jbtnOperacion.setText("Nuevo");
                        jbtnOperacion.setIcon(new ImageIcon(pathImage + "new.gif"));
                        jtxtId_Product.setEnabled(true);
                        jtbpProduct.setEnabledAt(1, true);
                        this.jcmbCategoria.setSelectedIndex(0);
                        if (mtdProductTable()) {
                            valForm.msjInfo("Articulo Actualizado correctamente...");
                        }
                    }
                } else {
                    valForm.msjWarn(mensaje);
                }
            }
        } catch (NumberFormatException | HibernateException e) {
            valForm.msjErr("Error al guardar el registro: " + e.getMessage());
        }
    }//GEN-LAST:event_jbtnOperacionActionPerformed

    private void jbtnRecuperarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRecuperarActionPerformed
        try {
            getByModifiedProduct();
        } catch (HibernateException he) {
            throw he;
        }
    }//GEN-LAST:event_jbtnRecuperarActionPerformed

    private void jtxtId_ProductKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtId_ProductKeyTyped
        valForm.longitudCaga(this.jtxtId_Product, 25, evt);
        valForm.soloNumeros(evt);
    }//GEN-LAST:event_jtxtId_ProductKeyTyped

    private void jtxtProductKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtProductKeyTyped
        valForm.longitudCaga(this.jtxtProduct, 45, evt);
    }//GEN-LAST:event_jtxtProductKeyTyped

    private void jtxtDescripcionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtDescripcionKeyTyped
        valForm.longitudCaga(this.jtxtDescripcion, 45, evt);
    }//GEN-LAST:event_jtxtDescripcionKeyTyped

    private void jtxtPrecioCompraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtPrecioCompraKeyTyped
        valForm.longitudCaga(this.jtxtPrecioCompra, 10, evt);
    }//GEN-LAST:event_jtxtPrecioCompraKeyTyped

    private void jtxtPrecioVentaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtPrecioVentaKeyTyped
        valForm.longitudCaga(this.jtxtPrecioVenta, 10, evt);
    }//GEN-LAST:event_jtxtPrecioVentaKeyTyped

    private void jtxtCantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtCantidadKeyTyped
        valForm.longitudCaga(jtxtCantidad, 10, evt);
        valForm.soloNumeros(evt);
    }//GEN-LAST:event_jtxtCantidadKeyTyped

    private void jbtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelarActionPerformed
        valForm.cleanTextField(jpnAddProduct);
        valForm.editableTextFields(jpnAddProduct, false);
        jtxtId_Product.setEnabled(true);
        jtbpProduct.setEnabledAt(1, true);
        jbtnOperacion.setText("Nuevo");
        this.jcmbCategoria.setSelectedIndex(jcmbCategoria.getItemCount() - 1);
        jbtnOperacion.setIcon(new ImageIcon(pathImage + "new.gif"));
    }//GEN-LAST:event_jbtnCancelarActionPerformed

    private void jbtnBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBuscaActionPerformed
        try {
            if (!"".equals(this.jtxtCodigoBusca.getText())) {
                Product rec;
                String id_Product = this.jtxtCodigoBusca.getText();
                rec = pDAO.selectProduct(id_Product);
                if (rec == null) {
                    valForm.msjInfo("Al articulo que desea buscar no existe en nuestra Base de Datos");
                } else {
                    if (mtdTitleTable()) {
                        Category c = categoryLogic.categoryId(rec.getId_category());
                        modelo.addRow(new Object[]{rec.getId_product(),
                                    rec.getProduct() + " " + rec.getDescripcion(),
                                    rec.getCantidad(),
                                    rec.getP_compra(),
                                    rec.getP_venta(),
                                    c.getCategory(),
                                    rec.getActivo()
                                });
                    }
                }
                this.jtxtCodigoBusca.setText("");
                this.jtxtCodigoBusca.requestFocus();
            } else {
                if (mtdProductTable()) {
                }
            }
        } catch (Exception ex) {
            System.out.println("Error Buscar: " + ex.getMessage());
            this.jtxtCodigoBusca.setText("");
            this.jtxtCodigoBusca.requestFocus();
        }

    }//GEN-LAST:event_jbtnBuscaActionPerformed

    private void jtxtCodigoBuscaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtCodigoBuscaKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            this.jbtnBusca.doClick();
        }
    }//GEN-LAST:event_jtxtCodigoBuscaKeyPressed

    private void jtblProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblProductMouseClicked
    }//GEN-LAST:event_jtblProductMouseClicked

    private void jtblProductMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblProductMousePressed
        try {
            if (evt.getClickCount() == 2) {
                getByModifiedProduct();
            }
        } catch (HibernateException he) {
            throw he;
        }
    }//GEN-LAST:event_jtblProductMousePressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnBusca;
    private javax.swing.JButton jbtnCancelar;
    private javax.swing.JButton jbtnOperacion;
    private javax.swing.JButton jbtnRecuperar;
    private javax.swing.JCheckBox jchkActivo;
    private javax.swing.JComboBox jcmbCategoria;
    private javax.swing.JLabel jlblRegistros;
    private javax.swing.JPanel jpnAddProduct;
    private javax.swing.JPanel jpnListProduct;
    private javax.swing.JTable jtblProduct;
    public static javax.swing.JTabbedPane jtbpProduct;
    private javax.swing.JTextField jtxtCantidad;
    private javax.swing.JTextField jtxtCodigoBusca;
    private javax.swing.JTextField jtxtDescripcion;
    private javax.swing.JTextField jtxtId_Product;
    private javax.swing.JTextField jtxtPrecioCompra;
    private javax.swing.JTextField jtxtPrecioVenta;
    private javax.swing.JTextField jtxtProduct;
    // End of variables declaration//GEN-END:variables

    private boolean mtdTitleTable() {
        modelo = new DefaultTableModel() {

            @Override
            public boolean isCellEditable(int row, int Column) {
                return false;
            }
        };
        modelo.addColumn("Codigo");
        modelo.addColumn("Articulo/Descripcion");
        modelo.addColumn("Cantidad");
        modelo.addColumn("Precio Compra");
        modelo.addColumn("Precio Venta");
        modelo.addColumn("Categoria");
        modelo.addColumn("Activo");
        jtblProduct.setModel(modelo);
        return true;
    }

    private boolean mtdProductTable() {
        try {
            if (mtdTitleTable()) {
                List<Product> listProduct = pDAO.listProduct();
                for (Product p : listProduct) {
                    for (Category c : myCategory) {
                        if (p.getId_category().equals(c.getId_category())) {
                            if (p.getActivo() == 1) {
                                mensaje = "SI";
                            } else {
                                mensaje = "NO";
                            }
                            modelo.addRow(new Object[]{p.getId_product(),
                                        p.getProduct() + " " + p.getDescripcion(),
                                        p.getCantidad(),
                                        p.getP_compra(),
                                        p.getP_venta(),
                                        c.getCategory(),
                                        mensaje
                                    });
                        }
                    }
                }
                //getNegocio();                
                this.jlblRegistros.setText("Hay " + listProduct.size() + " Articulos registrados en la Base de Datos");
            }
            return true;
        } catch (Exception ex) {
            valForm.msjErr("Error: " + ex.getMessage());
            return false;
        }
    }

    private Product recoveryProduct() {
        Product recovery;
        String id_Product = (String) jtblProduct.getValueAt(this.jtblProduct.getSelectedRow(), 0);
        recovery = pDAO.selectProduct(id_Product);
        return recovery;
    }

    /*
     * private boolean getNegocio(){ List<Negocio> negocioList =
     * negocioLogic.getNegocio(); for(Negocio n: negocioList){
     * this.jcmbNegocio.addItem(n.getNegocio()); } return true; }
     */
    private List<Category> getCategory() {
        List<Category> categoryList = categoryLogic.getCategory();
        return categoryList;
    }

    private boolean getCmbCategory(List<Category> categoryList) {
        String sel = "-- Seleccione una Categoria --";
        for (Category c : categoryList) {
            this.jcmbCategoria.addItem(c.getCategory());
        }
        this.jcmbCategoria.addItem(sel);
        this.jcmbCategoria.setSelectedItem(sel);
        return true;
    }

    private void getByModifiedProduct() {
        try {
            if (this.jtblProduct.getSelectedRowCount() != 0) {
                Product rc = recoveryProduct();
                valForm.editableTextFields(jpnAddProduct, true);
                this.jtxtId_Product.setEnabled(false);
                this.jtxtId_Product.setText("" + rc.getId_product());
                this.jtxtProduct.setText("" + rc.getProduct());
                this.jtxtDescripcion.setText("" + rc.getDescripcion());
                this.jtxtPrecioCompra.setText("" + rc.getP_compra());
                this.jtxtPrecioVenta.setText("" + rc.getP_venta());
                this.jtxtCantidad.setText("" + rc.getCantidad());

                if (null != myCategory) {
                    for (Category c : myCategory) {
                        if (c.getId_category().equals(rc.getId_category())) {
                            jcmbCategoria.setSelectedItem(c.getCategory());
                        }
                    }
                }
                /*
                 * Validamos si el Articulo esta activo
                 */
                if (rc.getActivo() == 1) {
                    this.jchkActivo.setSelected(true);
                } else {
                    this.jchkActivo.setSelected(false);
                }
                /*
                 * Cambia el estatus del boton Guardar a Actualizar
                 */
                this.jbtnOperacion.setText("Actualizar");
                jbtnOperacion.setIcon(new ImageIcon(pathImage + "update.gif"));
                // Seleccionamos la Pestaña 1 para modificar el Articulo seleccionado
                frmProduct_1.jtbpProduct.setSelectedIndex(0);
                jtbpProduct.setEnabledAt(1, false);
            } else {
                valForm.msjWarn("No se ha seleccionado ningun Articulo...");
            }
        } catch (Exception ex) {
            System.out.println("getByModifiedProduct. Error: " + ex.getMessage());
        }
    }

    public void addProveedor(BigInteger cve_proveedor, String name) {
        this.setTitle("Proveedor: " + cve_proveedor + ": " + name);
    }
}
